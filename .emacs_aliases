# -*- coding: utf-8 -*-
#### http://rinari.rubyforge.org/Navigation.html#Navigation
     C-c ; f c	rinari-find-controller
     C-c ; f e	rinari-find-environment
     C-c ; f f	rinari-find-file-in-project
     C-c ; f h	rinari-find-helper
     C-c ; f i	rinari-find-migration
     C-c ; f j	rinari-find-javascript
     C-c ; f l	rinari-find-plugin
     C-c ; f m	rinari-find-model
     C-c ; f n	rinari-find-configuration
     C-c ; f o	rinari-find-log
     C-c ; f p	rinari-find-public
     C-c ; f s	rinari-find-script
     C-c ; f t	rinari-find-test
     C-c ; f v	rinari-find-view
     C-c ; f w	rinari-find-worker
     C-c ; f x	rinari-find-fixture
     C-c ; f y	rinari-find-stylesheet

copy-to-register							C-x r s, C-x r x
insert-register								C-x r i, C-x r g

emacs-rails
emacs-rails-reloaded
rinari
emacs-rails-kit
emacs-starter-kit
my_emacs_for_rails  (git://github.com/spastorino/my_emacs_for_rails.git)
my_emacs_for_rails  (git://github.com/selman/my_emacs_for_rails.git)



inf-ruby.el
A ruby process can be fired up with
  M-x run-ruby.
  M-x ruby-send-region-and-go

# Start up emacs with different default lisp directory, Ex:
# emacs -q -l ~/src/emacs-starter-kit/init.el
  emacs -q -l ~/src/emacs-starter-kit/init.el

# After starting the ruby debugger with rdebug in a shell turn on the source code tracker to see where you are.
# I have not been successful with M-x rdebug.  It does not seem to synchr well
  # http://rubyforge.org/projects/ruby-debug
  M-x turn-on-rdebug-track-mode

# Ruby Information like Man pages in emacs
  M-x ri

# start emacs within a text terminal, (no X windows frame), very useful if all you have is a VT100 emulation over a dial  up connection.
  emacs -nw

# start emacs and goto line 100 in file report.txt
  emacs +100 report.txt

# start emacs and ignore the .emacs file
  emacs -q

# start emacs configured using fred's .emacs
  emacs -u fred

;;;;;;;;;;;;;;;;;;;;;;;;;;;;; .emacs ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# Add snippets to emacs
# http://code.google.com/p/yasnippet/

(add-to-list 'load-path
             "~/.emacs.d/yasnippet-0.6.1c")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet-0.6.1c/snippets/")

;;; GET RID OF THE BLASTED CONTROL CHARACTERS IN EMACS
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;;; ENABLE CLIPBOARD ON WIPE
(global-set-key "w" (quote clipboard-kill-ring-save))

;;; SET A KEY FOR COMMENTING CODE
(global-set-key "" (quote comment-region))

;;; LINE NUMBERS
(global-linum-mode (quote toggle))

;;; LOAD UP MY HELP FILE ALIASES
(dired "~/.*_aliases" nil)

;;; Start a shell
(shell "*bash*")

;;; NEW VERSION OF ORG-MODE
(setq load-path (cons "~/emacs-packages/org/lisp" load-path))
(setq load-path (cons "~/emacs-packages/org/contrib/lisp" load-path))
(require 'org-install)
         ;; The following lines are always needed.  Choose your own keys.
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
        ;; AGENDA FILE POINTER, JUST ONE FOR NOW
(setq org-agenda-files (list "~/Documents/priorities.org"))

;;; CHANGE POSITION OF TWO BUFFERS
(fset 'cmm-swap-buffers
   [?\C-x ?b ?m ?y ?t ?e ?m ?p ?a ?r ?y ?y ?b ?u ?f ?f ?f ?f ?e ?r return return ?\C-x ?o ?\C-x ?b return ?\C-x ?o ?\C-x ?b return ?\C-x ?o])

;;; BETTER COMMENT OUT AN ERB LINE
(fset 'cmm-comment-erb
   [?\C-s ?< ?% ?\C-b ?  ?\C-b ?# ?\C-a ?\C-  ?\C-n ?\C-c ?\C-c ?\C-c])
(global-set-key "" (quote cmm-comment-erb))
(fset 'cmm-comment-erb-line
   [?\C-a ?\C-  ?\C-e ?\C-x ?n ?n ?\C-a ?\C-x ?h escape ?x ?r ?e ?p ?l ?a ?c ?e ?  ?s ?t ?r ?i ?n ?g return ?% return ?# ?% ?# return ?\C-a ?\C-a ?\C-  ?\C-e ?\C-c ?\C-c ?\C-c ?\C-x ?n ?w ?\C-n])
(global-set-key "" (quote cmm-universal-argument-comment-erb-line))
(fset 'cmm-universal-argument-comment-erb-line
   [?\C-a ?\C-  ?\C-e ?\C-x ?n ?n ?\C-x ?h ?\C-u ?\C-c ?\C-c ?\C-c ?\C-x ?h ?\C-a escape ?x ?r ?e ?p ?l ?a ?c ?e ?  ?s ?t ?r ?i ?n ?g return ?# ?% ?# return ?% return ?\C-x ?n ?w ?\C-n])


;;; see ~/.emacs.d/addons.el
;;; SIMPLE CODE FOLD TOGGLING
;;; http://emacs.wordpress.com/2007/01/16/quick-and-dirty-code-folding/
(defun jao-selective-display ()
  "Activate selective display based on the column at point"
  (interactive)
  (set-selective-display
   (if selective-display
       nil
     (+ 1 (current-column)))))
(global-set-key (quote [3 67108896]) (quote jao-selective-display))  ;;; [C-c C-space]
;;;(global-set-key "." (quote jao-selective-display))

;; SAVE LAYOUT TO REGISTER A
;; C-x r w a
;; RESTORE LAYOUT SAVE IN REGISTER A
;; C-x r j a
(winner-mode 1)

(put 'scroll-left 'disabled nil)
(put 'narrow-to-region 'disabled nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;; .emacs ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

http://emacs-fu.blogspot.com/2009/03/color-theming.html

If you see some text that has some unexpected color, and you wonder
why that is, move the cursor there, and call

M-x describe-face

With that information, you can then configure the looks

(set-face-foreground 'default "blue")
(set-face-background 'default "green")

 M-x list-colors-display

Best command for rails views
  C-c C-t runs the command sgml-tag, interactively insert tags
  C-c C-e runs the command sgml-close-tag, insert end tag for open tag

To install my_emacs_for_rails you need the following font
   http://kevin.vanzonneveld.net/techblog/article/install_the_best_coding_font/
    sudo aptitude install ttf-inconsolata

Emacs VI command equivalents table http://grok2.tripod.com/


M-x rdebug
============
  run with
rdebugâ€”emacs 3â€”no-stop PATH_TO/script/server
rdebug --emacs 3 --no-stop PATH_TO/script/server


To tail a file in emacs do
==========================
M-x ansi-term <return>
tail -f development.log


http://emacsblog.org/2008/12/05/emacs-starter-kit/
$ git clone git://github.com/technomancy/emacs-starter-kit.git
$ emacs -q -l ~/path/to/emacs-starter-kit/init.el


expand-abbrev
C-x a ', C-x a e, C-x '

C-x a g runs the command add-global-abbrev, which is an interactive

;How to remove blank lines
(flush-lines "^$" nil nil t) ; M-x flush-lines ^$ <return>



[*****]
To select files to search by regexp:  (IOW search through all buffers)
  M-x multi-occur-in-matching-buffers


# Mon Jan 17 12:16:31 2011

# go to line 100 in file.rb
emacsclient +100 file.rb

# exit from that file with C-x #

* Add a line to head of file to control specific actions for that file in buffer
   #-*- x-soft-wrap-text: false; x-show-navigation-bar: true; x-auto-expand-tabs: false; x-show-invisibles: true; x-typographers-quotes: false; x-show-gutter: true; x-show-spaces: true; x-show-page-guide: true; x-show-line-numbers: true; x-show-toolbar: true;  -*-



comint-bol is an interactive compiled Lisp function in `comint.el'.

(comint-bol &optional ARG)

Go to the beginning of line, then skip past the prompt, if any.
If prefix argument is given (C-u) the prompt is not skipped.
If `comint-use-prompt-regexp' is non-nil, then the prompt skip is done
by skipping text matching the regular expression `comint-prompt-regexp',
a buffer local variable.

[back]



"^[^#$%>\n]*[#$%>] *"


comint-prompt-regexp is a variable defined in `comint.el'.
Its value is "^[^#$%>\n]*[#$%>] *"
Local in buffer *shell*; global value is "^"

Documentation:
Regexp to recognize prompts in the inferior process.
Defaults to "^", the null string at BOL.

This variable is only used if the variable
`comint-use-prompt-regexp' is non-nil.

Good choices:
  Canonical Lisp: "^[^> \n]*>+:? *" (Lucid, franz, kcl, T, cscheme, oaklisp)
  Lucid Common Lisp: "^\\(>\\|\\(->\\)+\\) *"
  franz: "^\\(->\\|<[0-9]*>:\\) *"
  kcl: "^>+ *"
  shell: "^[^#$%>\n]*[#$%>] *"
  T: "^>+ *"

This is a good thing to set in mode hooks.

[back]


# like $ tail -f developer.log
M-x auto-revert-tail-mode for developer.log file to tail -f the file


/usr/local/Cellar/emacs/HEAD/share/emacs/24.0.50/lisp/bookmark.el.gz

;;; Misc comments:
;;
;; If variable bookmark-use-annotations is non-nil, an annotation is
;; queried for when setting a bookmark.
;;
;; The bookmark list is sorted lexically by default, but you can turn
;; this off by setting bookmark-sort-flag to nil.  If it is nil, then
;; the list will be presented in the order it is recorded
;; (chronologically), which is actually fairly useful as well.


How to recursively change files

  1. M-x find-name-dired: you will be prompted for a root directory and a filename pattern.
  2. Press t to "toggle mark" for all files found.
  3. Press Q for "Query-Replace in Files...": you will be prompted for query/substitution regexps.
  4. Proceed as with query-replace-regexp: SPACE to replace and move to next match, n to skip a match, etc.

FUNCTIONS TO REMEMBER
=======================================================
sgml-close-tag                    C-c ], C-c /, C-c C-e
wrap-region-trigger               <
sgml-tag                          C-c C-t
sgml-close-tag                    C-c C-e
auto-revert-tail-mode
multi-occur-in-matching-buffers   M-M s
col-highlight-flash               C-+
describe-key                      C-h k                 ;; menus too!!
org-table-move-column             M-right               ;; Mac M-right === OPTION-right


To select files to search by regexp:

  M-x multi-occur-in-matching-buffers

Not About Keys:
 EMACS				MAC
  M-ESC === M-fn-option


# http://emacswiki.org/emacs/SetFonts#toc2
	Vanilla Emacs: You can use 
`C-x C-+â€™  increase the buffer text size
`C-+â€™ to repeat
â€˜C-x C--â€™  decrease the buffer text size
â€˜C--â€™ to repeat
C-x C-0 To restore the default. 
â€˜S-mouse-1â€™ pops up a menu where you can choose these same actions.


# Basic command line file for ruby ;)

		#!/usr/bin/env ruby

		ARGV.each do|a|
			puts "Argument: #{a}"
		end


*** emacs regex search strings for this org-mode file
\* \(GOAL:\|REDHERRING:\|TODO:\|ATTENTION:\|INFOTOID:\|QUESTION:\)
\* \(GOAL:\|REDHERRING:\|ATTENTION:\|INFOTOID:\|QUESTION:\)
*** ruby-forward-sexp C-M-f
*** yasnippet definition examples
    $0 
    ${0:actual_instance}
    ${1:"${2:path/to/file}.dump"}
*** RUBY ON RAILS  alter block format C-c {
    do end  # => {||}  # => and back
    ruby-toggle-block is an interactive compiled Lisp function in ruby-mode.el
    It is bound to C-c {
*** ORG MODE KEY BINDINGS
**** Important to remember key bindings
     insert column -  <M-S-right>     org-shiftmetaright

**** Lots of key bindings
      key             binding
      ---             -------

      C-a             org-beginning-of-line
      C-c             Prefix Command
      C-e             org-end-of-line
      TAB             org-cycle (that binding is currently shadowed by another mode)
      C-j             org-return-indent
      C-k             org-kill-line
      RET             org-return (that binding is currently shadowed by another mode)
      C-y             org-yank
      ESC             Prefix Command
      |               org-force-self-insert
      C-#             org-table-rotate-recalc-marks
      C-'             org-cycle-agenda-files
      C-,             org-cycle-agenda-files
      <C-S-down>      org-shiftcontroldown
      <C-S-left>      org-shiftcontrolleft
      <C-S-return>    org-insert-todo-heading-respect-content
      <C-S-right>     org-shiftcontrolright
      <C-S-up>        org-shiftcontrolup
      <C-return>      org-insert-heading-respect-content
      <C-tab>         org-force-cycle-archived
      <M-S-down>      org-shiftmetadown (that binding is currently shadowed by another mode)
      <M-S-left>      org-shiftmetaleft
      <M-S-return>    org-insert-todo-heading
      <M-S-right>     org-shiftmetaright (insert column)
      <M-S-up>        org-shiftmetaup (that binding is currently shadowed by another mode)
      <M-down>        org-metadown (that binding is currently shadowed by another mode)
      <M-left>        org-metaleft
      <M-return>      org-meta-return
      <M-right>       org-metaright
      <M-up>          org-metaup (that binding is currently shadowed by another mode)
      <S-down>        org-shiftdown
      <S-iso-lefttab>                 org-shifttab
      <S-left>        org-shiftleft
      <S-return>      org-table-copy-down
      <S-right>       org-shiftright
      <S-tab>         org-shifttab
      <S-up>          org-shiftup
      <backtab>       org-shifttab
      <remap>         Prefix Command
      <tab>           org-cycle (that binding is currently shadowed by another mode)

      C-M-i           pcomplete
      M-RET           org-insert-heading
      C-M-t           org-transpose-element
      M-a             org-backward-sentence
      M-e             org-forward-sentence
      M-h             org-mark-element
      M-{             org-backward-element
      M-}             org-forward-element

      C-c C-a         org-attach
      C-c C-b         org-backward-heading-same-level
      C-c C-c         org-ctrl-c-ctrl-c
      C-c C-d         org-deadline
      C-c C-e         org-export
      C-c C-f         org-forward-heading-same-level
      C-c C-j         org-goto
      C-c C-k         org-kill-note-or-show-branches
      C-c C-l         org-insert-link
      C-c RET         org-ctrl-c-ret
      C-c C-o         org-open-at-point
      C-c C-q         org-set-tags-command
      C-c C-r         org-reveal
      C-c C-s         org-schedule
      C-c C-t         org-todo
      C-c C-v         Prefix Command
      C-c C-w         org-refile
      C-c C-x         Prefix Command
      C-c C-y         org-evaluate-time-range
      C-c C-z         org-add-note
      C-c ESC         Prefix Command
      C-c C-^         org-up-element
      C-c C-_         org-down-element
      C-c SPC         org-table-blank-field
      C-c !           org-time-stamp-inactive
      C-c #           org-update-statistics-cookies
      C-c $           org-archive-subtree
      C-c %           org-mark-ring-push
      C-c &           org-mark-ring-goto (that binding is currently shadowed by another mode)
      C-c '           org-edit-special
      C-c *           org-ctrl-c-star
      C-c +           org-table-sum
      C-c ,           org-priority
      C-c -           org-ctrl-c-minus
      C-c .           org-time-stamp
      C-c /           org-sparse-tree
      C-c :           org-toggle-fixed-width-section
      C-c ;           org-toggle-comment
      C-c <           org-date-from-calendar
      C-c =           org-table-eval-formula
      C-c >           org-goto-calendar
      C-c ?           org-table-field-info
      C-c @           org-mark-subtree
      C-c [           org-agenda-file-to-front
      C-c \           org-match-sparse-tree
      C-c ]           org-remove-file
      C-c ^           org-sort
      C-c `           org-table-edit-field
      C-c {           org-table-toggle-formula-debugger
      C-c |           org-table-create-or-convert-from-region
      C-c }           org-table-toggle-coordinate-overlays
      C-c ~           org-table-create-with-table.el
      C-c C-*         org-list-make-subtree

      <remap> <delete-backward-char>  org-delete-backward-char (that binding is currently shadowed by another mode)
      <remap> <delete-char>           org-delete-char
      <remap> <outline-backward-same-level> org-backward-heading-same-level
      <remap> <outline-demote>        org-demote-subtree
      <remap> <outline-forward-same-level> org-forward-heading-same-level
      <remap> <outline-insert-heading> org-ctrl-c-ret
      <remap> <outline-mark-subtree>  org-mark-subtree
      <remap> <outline-promote>       org-promote-subtree
      <remap> <self-insert-command>   org-self-insert-command
      <remap> <show-branches>         org-kill-note-or-show-branches
      <remap> <show-subtree>          org-show-subtree

      C-c C-a         show-all (that binding is currently shadowed by another mode)
      C-c C-b         outline-backward-same-level (that binding is currently shadowed by another mode)
      C-c C-c         hide-entry (that binding is currently shadowed by another mode)
      C-c C-d         hide-subtree (that binding is currently shadowed by another mode)
      C-c C-e         show-entry (that binding is currently shadowed by another mode)
      C-c C-f         outline-forward-same-level (that binding is currently shadowed by another mode)
      C-c TAB         show-children
      C-c C-k         show-branches (that binding is currently shadowed by another mode)
      C-c C-l         hide-leaves (that binding is currently shadowed by another mode)
      C-c RET         outline-insert-heading (that binding is currently shadowed by another mode)
      C-c C-n         outline-next-visible-heading
      C-c C-o         hide-other (that binding is currently shadowed by another mode)
      C-c C-p         outline-previous-visible-heading
      C-c C-q         hide-sublevels (that binding is currently shadowed by another mode)
      C-c C-s         show-subtree (that binding is currently shadowed by another mode)
      C-c C-t         hide-body (that binding is currently shadowed by another mode)
      C-c C-u         outline-up-heading
      C-c C-v         outline-move-subtree-down (that binding is currently shadowed by another mode)
      C-c C-^         outline-move-subtree-up (that binding is currently shadowed by another mode)
      C-c @           outline-mark-subtree (that binding is currently shadowed by another mode)
      C-c C-<         outline-promote
      C-c C->         outline-demote

      C-M-i           ispell-complete-word (that binding is currently shadowed by another mode)

      C-c C-M-l       org-insert-all-links

      C-c C-v C-a     org-babel-sha1-hash
      C-c C-v C-b     org-babel-execute-buffer
      C-c C-v C-c     org-babel-check-src-block
      C-c C-v C-d     org-babel-demarcate-block
      C-c C-v C-e     org-babel-execute-maybe
      C-c C-v C-f     org-babel-tangle-file
      C-c C-v TAB     org-babel-view-src-block-info
      C-c C-v C-j     org-babel-insert-header-arg
      C-c C-v C-l     org-babel-load-in-session
      C-c C-v C-n     org-babel-next-src-block
      C-c C-v C-o     org-babel-open-src-block-result
      C-c C-v C-p     org-babel-previous-src-block
      C-c C-v C-r     org-babel-goto-named-result
      C-c C-v C-s     org-babel-execute-subtree
      C-c C-v C-t     org-babel-tangle
      C-c C-v C-u     org-babel-goto-src-block-head
      C-c C-v C-v     org-babel-expand-src-block
      C-c C-v C-x     org-babel-do-key-sequence-in-edit-buffer
      C-c C-v C-z     org-babel-switch-to-session
      C-c C-v ESC     Prefix Command
      C-c C-v I       org-babel-view-src-block-info
      C-c C-v a       org-babel-sha1-hash
      C-c C-v b       org-babel-execute-buffer
      C-c C-v c       org-babel-check-src-block
      C-c C-v d       org-babel-demarcate-block
      C-c C-v e       org-babel-execute-maybe
      C-c C-v f       org-babel-tangle-file
      C-c C-v g       org-babel-goto-named-src-block
      C-c C-v h       org-babel-describe-bindings
      C-c C-v i       org-babel-lob-ingest
      C-c C-v j       org-babel-insert-header-arg
      C-c C-v l       org-babel-load-in-session
      C-c C-v n       org-babel-next-src-block
      C-c C-v o       org-babel-open-src-block-result
      C-c C-v p       org-babel-previous-src-block
      C-c C-v r       org-babel-goto-named-result
      C-c C-v s       org-babel-execute-subtree
      C-c C-v t       org-babel-tangle
      C-c C-v u       org-babel-goto-src-block-head
      C-c C-v v       org-babel-expand-src-block
      C-c C-v x       org-babel-do-key-sequence-in-edit-buffer
      C-c C-v z       org-babel-switch-to-session-with-code

      C-c C-x C-a     org-archive-subtree-default
      C-c C-x C-b     org-toggle-checkbox
      C-c C-x C-c     org-columns
      C-c C-x C-d     org-clock-display
      C-c C-x C-f     org-emphasize
      C-c C-x TAB     org-clock-in
      C-c C-x C-j     org-clock-goto
      C-c C-x C-l     org-preview-latex-fragment
      C-c C-x RET     Prefix Command
      C-c C-x C-n     org-next-link
      C-c C-x C-o     org-clock-out
      C-c C-x C-p     org-previous-link
      C-c C-x C-q     org-clock-cancel
      C-c C-x C-r     org-clock-report
      C-c C-x C-s     org-advertized-archive-subtree
      C-c C-x C-t     org-toggle-time-stamp-overlays
      C-c C-x C-u     org-dblock-update
      C-c C-x C-v     org-toggle-inline-images
      C-c C-x C-w     org-cut-special
      C-c C-x C-x     org-clock-in-last
      C-c C-x C-y     org-paste-special
      C-c C-x C-z     org-resolve-clocks
      C-c C-x ESC     Prefix Command
      C-c C-x !       org-reload
      C-c C-x ,       org-timer-pause-or-continue
      C-c C-x -       org-timer-item
      C-c C-x .       org-timer
      C-c C-x 0       org-timer-start
      C-c C-x :       org-timer-cancel-timer
      C-c C-x ;       org-timer-set-timer
      C-c C-x <       org-agenda-set-restriction-lock
      C-c C-x >       org-agenda-remove-restriction-lock
      C-c C-x A       org-archive-to-archive-sibling
      C-c C-x E       org-inc-effort
      C-c C-x G       org-feed-goto-inbox
      C-c C-x [       org-reftex-citation
      C-c C-x \       org-toggle-pretty-entities
      C-c C-x _       org-timer-stop
      C-c C-x a       org-toggle-archive-tag
      C-c C-x b       org-tree-to-indirect-buffer
      C-c C-x c       org-clone-subtree-with-time-shift
      C-c C-x d       org-insert-drawer
      C-c C-x e       org-set-effort
      C-c C-x f       org-footnote-action
      C-c C-x g       org-feed-update-all
      C-c C-x i       org-insert-columns-dblock
      C-c C-x o       org-toggle-ordered-property
      C-c C-x p       org-set-property
      C-c C-x v       org-copy-visible

      C-c C-v C-M-h   org-babel-mark-block

      C-c C-x C-M-v   org-redisplay-inline-images
      C-c C-x M-w     org-copy-special

      C-c C-x RET g   org-mobile-pull
      C-c C-x RET p   org-mobile-push

      Exporting to CSV format is the only one I use and this provides the default so I can just hit RETURN when prompted for the format.
      (setq org-table-export-default-format "orgtbl-to-csv")

      To export the following table I put the cursor inside the table and hit M-x org-table-export

*** Change font size C-x C-+
    `C-x C-+â€™ and â€˜C-x C--â€™ to increase or decrease the buffer text size
